<?php
/**
 * Structure_Rapidmail class
 *
 * @package APIAPI\Structure_Billomat
 * @since   1.0.0
 */

namespace APIAPI\Structure_Rapidmail;

use APIAPI\Core\Structures\Structure;
use APIAPI\Core\Request\Method;

if ( ! class_exists( 'APIAPI\Structure_Rapidmail\Structure_Rapidmail' ) ) {

	/**
	 * Structure implementation for Rapidmail.
	 *
	 * @since 1.0.0
	 */
	class Structure_Rapidmail extends Structure {
		/**
		 * Sets up the API structure.
		 * This method should populate the routes array, and can also be used to
		 * handle further initialization functionality, like setting the authenticator
		 * class and default authentication data.
		 *
		 * @since 1.0.0
		 */
		protected function setup() {
			$this->title = 'Rapidmail API';

			$this->description = 'Allows to access and manage the data in your Rapidmail account.';
			$this->base_uri    = 'https://apiv3.emailsys.net/v1/';

			$this->authenticator = 'basic';

			$this->routes['/apiusers'] = array(
				'methods' => array(
					Method::GET  => array(
						'description'          => 'Gets a Token.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'page' => array(
								'description' => 'Page to load',
								'type'        => 'integer',
							)
						)
					),
					Method::POST => array(
						'description'          => 'Creates a Rapidmail user.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'id'                  => array(
								'description' => 'User Id',
								'type'        => 'integer'
							),
							'username'            => array(
								'description' => 'Authentication username, will be autogenerated on creation',
								'type'        => 'string'
							),
							'password'            => array(
								'description' => 'Authentication password, will be autogenerated on creation',
								'type'        => 'string'
							),
							'description'         => array(
								'description' => 'User description',
								'type'        => 'string'
							),
							'authentication_type' => array(
								'description' => 'Authentication type used for API user. Please note that setting authentication_type to “key” will currently only result in a usable user if a default authentication key has been configured for the whitelabel.',
								'type'        => 'string'
							),
							'created'             => array(
								'description' => 'Creation time (format YYYY-MM-DD H:i:s)',
								'type'        => 'string'
							),
						)
					),
					Method::GET  => array(
						'description'          => 'Get a Rapidmail user',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'id'                  => array(
								'description' => 'User Id',
								'type'        => 'integer'
							),
							'username'            => array(
								'description' => 'Username',
								'type'        => 'string'
							),
							'password'            => array(
								'description' => 'Password',
								'type'        => 'string'
							),
							'description'         => array(
								'description' => 'User description',
								'type'        => 'string'
							),
							'authentication_type' => array(
								'description' => 'Authentication type (default "password")',
								'type'        => 'string'
							),
							'created'             => array(
								'description' => 'Creation time (format YYYY-MM-DD H:i:s)',
								'type'        => 'string'
							),

						)
					)
				)
			);

			$this->routes['/recipientlists'] = array(
				'methods' => array(
					Method::GET  => array(
						'description'          => 'Get recipient lists.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'page' => array(
								'description' => 'Page to load',
								'type'        => 'integer',
							),
						),
					),
					Method::POST => array(
						'description'          => 'Creates a Rapidmail user.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'name'                                           => array(
								'description' => 'Name of the recipientlist (maxLength: 100)',
								'type'        => 'string'
							),
							'description'                                    => array(
								'description' => 'Description of recipientlist (maxLength: 10000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_blacklist'                          => array(
								'description' => 'Specify if recipients should be blacklisted upon unsubscription (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
							'recipient_subscribe_email'                      => array(
								'description' => 'Specify if a welcome email should be sent on subscribe (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
							/**
							 * API does not validate following data correct
							 */
							/*
							'subscribe_confirmation_email_from'              => array(
								'description' => 'From email address to use for recipientlist double-opt-in message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_subject'           => array(
								'description' => 'Subject to use for recipientlist double-opt-in message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_from_name'         => array(
								'description' => 'From name to use for recipientlist double-opt-in message',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_body'              => array(
								'description' => 'Text message body to use for recipientlist double-opt-in message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_body_html'         => array(
								'description' => 'HTML message body to use for recipientlist double-opt-in message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_from'      => array(
								'description' => 'From email address to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_from_name' => array(
								'description' => 'From name to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_subject'   => array(
								'description' => 'Subject to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_body'      => array(
								'description' => 'Text message body to use for recipientlist welcome message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_body_html' => array(
								'description' => 'HTML message body to use for recipientlist welcome message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_from'            => array(
								'description' => 'From email address to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_from_name'       => array(
								'description' => 'From name to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_subject'         => array(
								'description' => 'Subject to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_body'            => array(
								'description' => 'Text message body to use for recipientlist double-opt-out message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_body_html'       => array(
								'description' => 'HTML nessage body to use for recipientlist goodbye message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_from'    => array(
								'description' => 'From email address to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_from_name'       => array(
								'description' => 'From name to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_subject'         => array(
								'description' => 'Subject to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_body'            => array(
								'description' => 'Text message body to use for recipientlist goodbye message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_body_html'       => array(
								'description' => 'HTML message body to use for recipientlist goodbye message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							*/
							/**
							 * End of not accepted data
							 */
							'default'                                        => array(
								'description' => 'Set recipientlist as default (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
						),
					),
				),
			);

			$this->routes['/recipientlists/(?P<id>[\\d]+)'] = array(
				'methods' => array(
					Method::DELETE  => array(
						'description'          => 'Delete a recipient list.',
						'needs_authentication' => true,
					),
					Method::GET  => array(
						'description'          => 'Get a recipient list.',
						'needs_authentication' => true,
					),
					Method::PATCH => array(
						'description'          => 'Creates a Rapidmail user.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'name'                                           => array(
								'description' => 'Name of the recipientlist (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'description'                                    => array(
								'description' => 'Description of recipientlist (maxLength: 10000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_blacklist'                          => array(
								'description' => 'Specify if recipients should be blacklisted upon unsubscription (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
							'recipient_subscribe_email'                      => array(
								'description' => 'Specify if a welcome email should be sent on subscribe (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
							/**
							 * API does not validate following data correct
							 */
							/*
							'subscribe_confirmation_email_from'              => array(
								'description' => 'From email address to use for recipientlist double-opt-in message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_subject'           => array(
								'description' => 'Subject to use for recipientlist double-opt-in message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_from_name'         => array(
								'description' => 'From name to use for recipientlist double-opt-in message',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_body'              => array(
								'description' => 'Text message body to use for recipientlist double-opt-in message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_email_body_html'         => array(
								'description' => 'HTML message body to use for recipientlist double-opt-in message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_from'      => array(
								'description' => 'From email address to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_from_name' => array(
								'description' => 'From name to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_subject'   => array(
								'description' => 'Subject to use for recipientlist welcome message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_body'      => array(
								'description' => 'Text message body to use for recipientlist welcome message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'subscribe_confirmation_welcome_email_body_html' => array(
								'description' => 'HTML message body to use for recipientlist welcome message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_from'            => array(
								'description' => 'From email address to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_from_name'       => array(
								'description' => 'From name to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_subject'         => array(
								'description' => 'Subject to use for recipientlist double-opt-out message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_body'            => array(
								'description' => 'Text message body to use for recipientlist double-opt-out message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_email_body_html'       => array(
								'description' => 'HTML nessage body to use for recipientlist goodbye message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_from'    => array(
								'description' => 'From email address to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_from_name'       => array(
								'description' => 'From name to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_subject'         => array(
								'description' => 'Subject to use for recipientlist goodbye message (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_body'            => array(
								'description' => 'Text message body to use for recipientlist goodbye message (maxLength: 1500)',
								'type'        => 'string',
								'required'    => false,
							),
							'unsubscribe_confirmation_goodbye_email_body_html'       => array(
								'description' => 'HTML message body to use for recipientlist goodbye message (maxLength: 30000)',
								'type'        => 'string',
								'required'    => false,
							),
							*/
							/**
							 * End of not accepted data
							 */
							'default'                                        => array(
								'description' => 'Set recipientlist as default (example: yes, no)',
								'type'        => 'string',
								'required'    => false,
							),
						),
					),
				),
			);

			$this->routes['/recipients'] = array(
				'methods' => array(
					Method::GET  => array(
						'description'          => 'Get a list of recipients',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'recipientlist_id'     => array(
								'description' => 'Recipientlist ID to get recipients from',
								'type'        => 'integer'
							),
							'email'                => array(
								'description' => 'Filter recipients by email address',
								'type'        => 'string',
								'required'    => false,
							),
							'foreign_id'           => array(
								'description' => 'Filter recipients by foreign/external ID',
								'type'        => 'string',
								'required'    => false,
							),
							'page'                 => array(
								'description' => 'Page to load',
								'type'        => 'integer',
								'required'    => false,
							),
							'sort_by'              => array(
								'description' => 'Field to sort by, can be activated, created or updated',
								'type'        => 'string',
								'required'    => false,
							),
							'sort_order'           => array(
								'description' => 'Order to sort in, can be asc or desc',
								'type'        => 'string',
								'required'    => false,
							),
							'status'               => array(
								'description' => 'Filter by status. Can contain multiple values in comma-separated list (Available values: new, active, bounced, abused, deleted)',
								'type'        => 'string',
								'required'    => false,
							),
							'get_extra_big_fields' => array(
								'description' => 'Filter by stIf specified, extrabig fields will be returned for each recipient (Default value: no)',
								'type'        => 'string',
								'required'    => false,
							),
						),
					),
					Method::POST => array(
						'description'          => 'Create a new recipient.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'email'            => array(
								'description' => 'Email address',
								'type'        => 'string'
							),
							'recipientlist_id' => array(
								'description' => 'Recipientlist ID the recipient is assigned to',
								'type'        => 'string',
								'required'    => false,
							),
							'firstname'        => array(
								'description' => 'Firstname (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'lastname'         => array(
								'description' => 'Lastname (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'gender'           => array(
								'description' => 'Gender (Available values: male, female)',
								'type'        => 'string',
								'required'    => false,
							),
							'title'            => array(
								'description' => 'Title (academic)',
								'type'        => 'string',
								'required'    => false,
							),
							'zip'              => array(
								'description' => 'Zipcode (maxLength: 7)',
								'type'        => 'string',
								'required'    => false,
							),
							'birthdate'        => array(
								'description' => 'Birthdate (example: 1974-01-01T00:00:00.000Z)',
								'type'        => 'string',
								'required'    => false,
							),
							'foreign_id'       => array(
								'description' => 'Foreign/external ID of record (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'mailtype'         => array(
								'description' => 'Mailtype specifying if recipient wants text or html email (Available values: text, html)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra1'           => array(
								'description' => 'Extra 1 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra2'           => array(
								'description' => 'Extra 2 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra3'           => array(
								'description' => 'Extra 3 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra4'           => array(
								'description' => 'Extra 4 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra5'           => array(
								'description' => 'Extra 5 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra6'           => array(
								'description' => 'Extra 6 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra7'           => array(
								'description' => 'Extra 7 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra8'           => array(
								'description' => 'Extra 8 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra9'           => array(
								'description' => 'Extra 9 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra10'          => array(
								'description' => 'Extra 10 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig1'        => array(
								'description' => 'Extra big 1 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig2'        => array(
								'description' => 'Extra big 2 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig3'        => array(
								'description' => 'Extra big 3 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig4'        => array(
								'description' => 'Extra big 4 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig5'        => array(
								'description' => 'Extra big 5 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig6'        => array(
								'description' => 'Extra big 6 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig7'        => array(
								'description' => 'Extra big 7 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig8'        => array(
								'description' => 'Extra big 8 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig9'        => array(
								'description' => 'Extra big 9 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig10'       => array(
								'description' => 'Extra big 10 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'created_ip'       => array(
								'description' => 'IP address recipient was created from. Will default to current remote IP if not given',
								'type'        => 'string',
								'required'    => false,
							),
							'created_hostname' => array(
								'description' => 'Hostname recipient was created from. Will default to current remote host if not given',
								'type'        => 'string',
								'required'    => false,
							),
							'activated'        => array(
								'description' => 'Datetime recipient was activated (example: 2017-01-01 12:00:00)',
								'type'        => 'string',
								'required'    => false,
							),
						),
					),
				),
			);

			$this->routes['/recipients/(?P<id>[\\d]+)'] = array(
				'methods' => array(
					Method::GET  => array(
						'description'          => 'Get a recipient.',
						'needs_authentication' => true,
					),
					Method::DELETE  => array(
						'description'          => 'Delete a recipient.',
						'needs_authentication' => true,
					),
					Method::PATCH => array(
						'description'          => 'Create a new recipient.',
						'needs_authentication' => true,
						'request_data_type'    => 'json',
						'params'               => array(
							'recipient_id'            => array(
								'description' => 'Recipient id',
								'type'        => 'integer'
							),
							'email'            => array(
								'description' => 'Email address',
								'type'        => 'string',
								'required'    => false,
							),
							'recipientlist_id' => array(
								'description' => 'Recipientlist ID the recipient is assigned to',
								'type'        => 'string',
								'required'    => false,
							),
							'firstname'        => array(
								'description' => 'Firstname (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'lastname'         => array(
								'description' => 'Lastname (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'gender'           => array(
								'description' => 'Gender (Available values: male, female)',
								'type'        => 'string',
								'required'    => false,
							),
							'title'            => array(
								'description' => 'Title (academic)',
								'type'        => 'string',
								'required'    => false,
							),
							'zip'              => array(
								'description' => 'Zipcode (maxLength: 7)',
								'type'        => 'string',
								'required'    => false,
							),
							'birthdate'        => array(
								'description' => 'Birthdate (example: 1974-01-01T00:00:00.000Z)',
								'type'        => 'string',
								'required'    => false,
							),
							'foreign_id'       => array(
								'description' => 'Foreign/external ID of record (maxLength: 255)',
								'type'        => 'string',
								'required'    => false,
							),
							'mailtype'         => array(
								'description' => 'Mailtype specifying if recipient wants text or html email (Available values: text, html)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra1'           => array(
								'description' => 'Extra 1 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra2'           => array(
								'description' => 'Extra 2 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra3'           => array(
								'description' => 'Extra 3 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra4'           => array(
								'description' => 'Extra 4 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra5'           => array(
								'description' => 'Extra 5 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra6'           => array(
								'description' => 'Extra 6 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra7'           => array(
								'description' => 'Extra 7 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra8'           => array(
								'description' => 'Extra 8 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra9'           => array(
								'description' => 'Extra 9 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extra10'          => array(
								'description' => 'Extra 10 (maxLength: 100)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig1'        => array(
								'description' => 'Extra big 1 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig2'        => array(
								'description' => 'Extra big 2 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig3'        => array(
								'description' => 'Extra big 3 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig4'        => array(
								'description' => 'Extra big 4 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig5'        => array(
								'description' => 'Extra big 5 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig6'        => array(
								'description' => 'Extra big 6 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig7'        => array(
								'description' => 'Extra big 7 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig8'        => array(
								'description' => 'Extra big 8 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig9'        => array(
								'description' => 'Extra big 9 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'extrabig10'       => array(
								'description' => 'Extra big 10 (maxLength: 65535)',
								'type'        => 'string',
								'required'    => false,
							),
							'created_ip'       => array(
								'description' => 'IP address recipient was created from. Will default to current remote IP if not given',
								'type'        => 'string',
								'required'    => false,
							),
							'created_hostname' => array(
								'description' => 'Hostname recipient was created from. Will default to current remote host if not given',
								'type'        => 'string',
								'required'    => false,
							),
							'activated'        => array(
								'description' => 'Datetime recipient was activated (example: 2017-01-01 12:00:00)',
								'type'        => 'string',
								'required'    => false,
							),
						),
					),
				),
			);
		}
	}
}
